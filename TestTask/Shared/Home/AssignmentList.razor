
<div>
    <div class="text-white text-center rounded-top mb-0 bg-dark-blue">
        <span class="fs-24">@Status.GetDescription() (@Assignments.Count)</span>
    </div>
    <ul class="dropzone text-white mt-0 rounded-bottom bg-blue d-inline-block @dropClass" 
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="() => dropClass = string.Empty">

        @foreach (var job in Assignments)
        {
            <Assignment OnDeleteItem="Delete" CurrentAssignment="job"></Assignment>
        }
        <li>
            <nav class="nav nav-pills flex-column flex-sm-row pointer">
                <a @onclick="ShowAddModal" class="flex-sm-fill text-center nav-link font-weight-bold bg-purple fs-24">+</a>
            </nav>
        </li>
    </ul>
</div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    [CascadingParameter]
    AssignmentContainer Container { get; set; }

    [Parameter]
    public AssignmentStatus Status { get; set; }

    [Parameter]
    public AssignmentStatus[] AllowedStatuses { get; set; }

    List<AssignmentModel> Assignments = new List<AssignmentModel>();

    public delegate void SampleDelegate(AssignmentModel assignmentModel);

    string dropClass = string.Empty;

    protected override void OnParametersSet()
    {
        Assignments.Clear();
        Assignments.AddRange(Container.Assignments.Where(_ => _.Status.Equals(Status)));
    }

    private void HandleDragEnter()
    {
        if (Status == Container.CurrentAssignment.Status) return;

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.CurrentAssignment.Status))
            dropClass = "no-drop";
        else
            dropClass = "can-drop";
    }

    private async Task HandleDrop()
    {
        dropClass = string.Empty;

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.CurrentAssignment.Status))
            return;

        await Container.UpdateAssignmentAsync(Status);
    }

    private void Delete(AssignmentModel assignmentModel)
    {
        Container.Assignments.Remove(assignmentModel);
        Assignments.Clear();
        Assignments.AddRange(Container.Assignments.Where(_ => _.Status.Equals(Status)));
    }

    void ShowAddModal()
    {
        var parameters = new ModalParameters();
        SampleDelegate AddTaskDel = new SampleDelegate(AddAssignment);

        parameters.Add(nameof(AddAssignment), new EventCallback<AssignmentModel>(this, AddTaskDel));
        parameters.Add(nameof(Status), Status);

        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(0.3)
        };

        Modal.Show<AddAssignmentModal>("Добавление задачи", parameters, options);
    }

    void AddAssignment(AssignmentModel task)
    {
        Container.Assignments.Add(task);
        Container.OnStatusUpdated.InvokeAsync();
    }
}
