<EditForm Model="@model">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="customModal">
        <div class="form-group">
            <label for="formGroupExampleInput1">Название</label>
            <input type="text" class="form-control" @bind-value="model.Title" id="formGroupExampleInput1" placeholder="Введите название">
        </div>
        <div class="form-group">
            <label for="formGroupExampleInput2">Описание</label>
            <textarea class="form-control" id="formGroupExampleInput2" @bind-value="model.Description" @bind-value:event="oninput" style="resize: none;" placeholder="Опишите задачу" rows="3"></textarea>
        </div>
        <div class="form-group">
            <label for="formGroupExampleInput3">Дедлайн</label>
            <input class="form-control"
                   id="formGroupExampleInput3"
                   @bind-value="model.Deadline"
                   @bind-value:event="oninput"
                   @bind-value:format="yyyy-MM-ddTHH:mm"
                   type="datetime-local" />
        </div>
        <button type="submit" class="btn btn-primary" @onclick="AddNewAssignment">Добавить</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<AssignmentModel> AddAssignment { get; set; }

    [Parameter]
    public AssignmentStatus Status { get; set; }

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    AssignmentModel Assignment = new AssignmentModel() { Id = Guid.NewGuid() };

    ModalFormModel model = new ModalFormModel();

    protected override void OnInitialized()
    {
        model.Deadline = DateTime.Now.AddDays(1);
        Assignment.Status = this.Status;
    }


    public async Task AddNewAssignment()
    {
        if (string.IsNullOrEmpty(model.Description) || string.IsNullOrEmpty(model.Title))
            return;

        Assignment.Title = model.Title;
        Assignment.Description = model.Description;
        Assignment.Deadline = model.Deadline;
        await AddAssignment.InvokeAsync(Assignment);
        await ModalInstance.CloseAsync();
    }
}